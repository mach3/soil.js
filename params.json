{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Soil.js","tagline":"The basic prototype collection for class base programming with JavaScript, jQuery. ","body":"\r\n# Soil.js\r\n\r\nversion 0.9.3 (2012/11)\r\n\r\n\r\n## これはなに\r\n\r\n- jQuery用のクラスライブラリです\r\n- prototypeを継承して拡張します\r\n- Soilオブジェクトのクラスを継承をすると基本的な機能が使えるようになります\r\n\r\n## 使い方\r\n\r\n### Soilのクラスを継承する\r\n\r\nプロトタイプで書かれたクラスを plant メソッドで継承します。\r\n\r\n```js\r\n// 関数を定義します\r\nvar MyClass = function(){};\r\n\r\n// plantメソッドでSoil.Eventsを継承すると、\r\n// カスタムイベントが使えるようになります。\r\nMyClass.plant(Soil.Events);\r\n\r\n// valueが変わった時にchangeイベントを発火するようにします\r\n// カスタムイベントの発火には trigger() を使います\r\nMyClass.prototype.value = null;\r\nMyClass.prototype.setValue = function(value){\r\n\tif(this.value !== value){\r\n\t\tthis.value = value;\r\n\t\tthis.trigger(\"change\");\r\n\t}\r\n\treturn this;\r\n};\r\n```\r\n\r\nFunctionに拡張された plant() メソッドで継承が出来ます。  \r\nSoil.Eventsの他にも、Soilには基本的な機能を備えたクラス群が同梱してあります。  \r\n後は new でインタンスを生成して使うだけです。\r\n\r\n```js\r\n// インスタンスを生成します\r\nvar instance = new MyClass();\r\n\r\n// イベントハンドラの登録は on() を使います\r\ninstance.on(\"change\", function(){\r\n\tconsole.log(\"My value has been changed to \" + this.value);\r\n});\r\n\r\ninstance.setValue(\"foo\"); // <= \"My value has been changed to foo\"\r\n```\r\n\r\n### 複数クラスの継承\r\n\r\n引数にクラスを列挙すれば複数のクラスから機能を継承できます。\r\n\r\n```js\r\n// 後に記述された物が優先されます。\r\nMyClass.plant(Soil.Events, Soil.Attributes);\r\n```\r\n\r\n### 独自クラスの継承\r\n\r\n内部では prototype の中身をコピーしているだけなので、勿論独自クラスも継承できます。\r\n\r\n```js\r\nvar Animal = function(){};\r\n...\r\nvar Dog = function(){};\r\nDog.plant(Animal);\r\n```\r\n\r\n## クラス群\r\n\r\n### Soil.Config\r\n\r\n#### option : Object\r\n\r\n設定用の項目を定義します。（定義されていない項目は追加できません）\r\n\r\n```js\r\nMyClass.prototype.option = {\r\n\tfoo : null,\r\n\thoge : null\r\n};\r\n```\r\n\r\n#### config( key:String|values:Object, value:* ) : *\r\n\r\n値を設定または取得します。\r\n\r\n```js\r\n// 設定\r\ninstance.config(\"foo\", \"bar\");\r\ninstance.config({\"hoge\" : \"fuga\"});\r\n\r\n// 取得\r\ninstance.config(\"foo\"); // <= \"bar\"\r\ninstance.config(); // <= {\"hoge\":\"fuga\", \"foo\":\"bar\"}\r\n```\r\n\r\n### Soil.Events\r\n\r\nカスタムイベント機能を提供します。\r\n\r\n#### on( type:String, handler:Function )\r\n#### off( type:String, handler:Function )\r\n\r\non : イベントハンドラの登録。\r\noff : イベントハンドラの解除。\r\n\r\n```js\r\nvar handler = function(){}\r\ninstance.on(\"change\", handler); // 登録\r\ninstance.off(\"change\", handler); // 解除\r\n```\r\n\r\n#### trigger( type:String )\r\n\r\nカスタムイベントを発火します。\r\n\r\n```js\r\ninstance.trigger(\"change\");\r\n```\r\n\r\n### Soil.Attributes\r\n\r\n属性のセッター・ゲッターを提供します。\r\n\r\n#### attr : Object\r\n\r\n属性を定義します。（定義されていない属性は追加出来ません）\r\n\r\n```js\r\nPerson.prototype.attr = {\r\n\tname : null,\r\n\tage : null\r\n};\r\n```\r\n\r\n#### set( key:String, value:* )\r\n\r\n属性の値を設定します。\r\n\r\n```js\r\ninstance.set(\"name\", \"john\");\r\ninstance.set(\"age\", 18);\r\n```\r\n\r\n#### get( key:String ) : *\r\n\r\n属性の値を取得します。\r\n\r\n```js\r\ninstance.get(\"name\"); // <= \"john\"\r\ninstance.get(\"age\"); // <= 18\r\n```\r\n\r\n### Soil.Model\r\n\r\nSoil.Events と Soil.Attributes を継承し、\r\n両者の機能に加えて、値の変更時に change イベントを発火します。\r\n\r\n```js\r\ninstance.on(\"change\", function(){\r\n\tconsole.log(\"Changed to \" + this.get(\"name\"));\r\n});\r\n\r\ninstance.set(\"name\", \"john\"); // <= \"Changed to john\"\r\n```\r\n\r\n### Soil.Stack\r\n\r\n値をスタックするクラス。\r\n\r\n#### add( value:* )\r\n\r\n値を追加します。\r\n\r\n```js\r\ninstance.add(\"hoge\");\r\ninstance.add(\"fuga\", \"foo\", \"bar\", \"baz\");\r\n```\r\n\r\n#### fetch( [index:Integer] ) : *\r\n\r\n値を取得します。\r\n\r\n```js\r\ninstance.fetch(0); // <= \"hoge\"\r\ninstance.fetch(); // <= [\"hoge\", \"fuga\", \"foo\", \"bar\", \"baz\"]\r\n```\r\n\r\n#### index( [index:Integer] ) : *\r\n\r\n内部インデックスを設定または取得します。\r\n設定に成功するとインデックス番号を、失敗すると false を返します。\r\n\r\n```js\r\ninstance.index(2); // <= 2\r\ninstance.index(); // <= 2\r\n\r\ninstance.index(100); // <= false\r\n```\r\n\r\n#### rewind()\r\n\r\n内部インデックスを0に戻します。\r\n\r\n```js\r\ninstance.index(3); // <= 3\r\ninstance.rewind();\r\ninstance.index(); // <= 0\r\n```\r\n\r\n#### next() / prev()\r\n\r\nnext : 内部インデックスを進めます  \r\nprev : 内部インデックスを巻き戻します\r\n\r\n```js\r\ninstance.index(3);\r\ninstance.next();\r\ninstance.index(); // <= 4\r\ninstance.prev();\r\ninstance.index(); // <= 3\r\n```\r\n\r\n#### current() : *\r\n\r\n現在の値を取得します。\r\n\r\n```js\r\ninstance.index(1);\r\ninstance.current(); // <= \"fuga\"\r\n```\r\n\r\n#### each( callback:Function )\r\n\r\n値を走査し、コールバック関数に渡します。\r\n\r\n```js\r\ninstance.each(function(index, value){\r\n\tconsole.log( index + \":\" + value );\r\n});\r\n```\r\n\r\n#### remove( index:Integer|callback:Function )\r\n\r\n条件に合った値を削除します。\r\n条件には、インデックス番号か、あるいはコールバック関数を渡すことができます。\r\n（コールバック関数がtrueを返した場合に、その値を削除する）\r\n削除後、インデックスは振り直されます。\r\n\r\n```js\r\ninstance.remove(3); // <= \"foo\" を削除\r\ninstance.remove(function(value){\r\n\treturn value === \"hoge\"; // <= \"hoge\" を削除\r\n});\r\n```\r\n\r\n### Soil.View\r\n\r\nビュークラス。Mustacheのラッパーとしても働きます。\r\nSoil.Attributes を継承。\r\n\r\n#### template( [template:String] ) : *\r\n\r\nテンプレートを設定あるいは取得します。\r\nテンプレートの形式は、\"{{key}}\" を \"value\" に置換するだけの単純な物です。\r\nkeyが設定されていない場合は空白に置換されます。\r\n\r\n```js\r\ninstance.template(\"Hello, {{name}} !\");\r\ninstance.template(); // <= \"Hello, {{name}} !\"\r\n```\r\n\r\n#### render( [attr:Object] ) : String\r\n\r\nレンダリング結果を文字列で返します。\r\n引数にオブジェクトが渡された場合はその値を元にレンダリングし、\r\nそうでない場合はインスタンスのattrを使用します。\r\n\r\n```js\r\ninstance.set(\"name\", \"World\");\r\ninstance.render(); // <= \"Hello, World !\"\r\ninstance.render({ name : \"Earth\" }); // <= \"Hello, Earth !\"\r\n```\r\n\r\nこのクラス自体は単純な値の代入の機能しか備えていませんが、\r\nレンダリング実行時にMustacheがロードされていればMustacheでレンダリングを行います。\r\n\r\n\r\n## 作者\r\n\r\nmach3\r\n\r\n- [twitter](http://twitter.com/mach3ss)\r\n- [github](http://github.com/mach3)\r\n- [blog](http://blog.mach3.jp)\r\n\r\n\r\n"}